---
blueprint:
  name: AWTRIX Solar Energy Monitor
  description: >
    This blueprint will show the current solar energy received.
    
    It uses a icons 37515 (solar-input), 37516 (solar-low), 37517 (solar-high) that you need to install.

  domain: automation
  input:
    awtrix:
      name: AWTRIX Device
      description: Select the Awtrix light device
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          model: AWTRIX Light
          multiple: true
    power_source:
      name: Power Sensor
      description: A sensor providing the current power received from your solar system.
      selector:
        entity:
          domain:
            - sensor
          multiple: false
    threshold_high:
      name: Threshold for high solar production (W)
      description: The threshold above which the energy production of your solar system should be visualized as high. Input in Watts (W).
      selector:
        number:
          min: 0
          max: 100000
          unit_of_measurement: Watt
          mode: slider
      default: 800
    threshold_low:
      name: Threshold for low solar production (W)
      description: The threshold below which the energy production of your solar system should be visualized as low. Input in Watts (W).
      selector:
        number:
          min: 0
          max: 100000
          unit_of_measurement: Watt
          mode: slider
      default: 100
    skip_if_zero_watts:
      name: Hide solar production if at 0 Watts
      description: 'This will not show the solar energy production on your awtrix if the production is below 0 Watts.'
      selector:
        boolean:
      default: false
mode: single
variables:
  device_ids: !input awtrix
  devices_topics: >-
    {%- macro get_device_topic(device_id) %}
    {{ states((device_entities(device_id) | select('search','device_topic') | list)[0]) }}
    {%- endmacro %}
    
    {%- set ns = namespace(devices=[]) %}
    {%- for device_id in device_ids %}
      {%- set device=get_device_topic(device_id)|replace(' ','') %}
      {% set ns.devices = ns.devices + [ device ~ '/custom/solar_power'] %}
    {%- endfor %}
    {{ ns.devices }}
  power_sensor: !input power_source
  power_level: >-
    {{ states[power_sensor].state | int(0) | abs }}
  threshold_low: !input threshold_low
  threshold_high: !input threshold_high
  power_level_icon: >-
    {%- if power_level > threshold_high %}{{37517}}{%- endif %}
    {%- if (power_level <= threshold_high) and (power_level > threshold_low) %}{{37515}}{%- endif %}
    {%- if power_level <= threshold_low %}{{37516}}{%- endif %}
  power_level_color: >-
    {%- if power_level > threshold_high %}{{"#04FE04"}}{%- endif %}
    {%- if (power_level <= threshold_high) and (power_level > threshold_low) %}{{"#FCFEFC"}}{%- endif %}
    {%- if power_level <= threshold_low %}{{"#FF4E1A"}}{%- endif %}
  power_level_text: >-
    {%- if power_level > 1000  %}{{ ((power_level | float(default=0)) / 1000) | round(1)}} kW{%- else %}{{power_level | round(0)}} W{%- endif %}
  skip_if_zero_watts: !input skip_if_zero_watts
  payload: >-
    {"icon":"{{ power_level_icon }}", "text": "{{ power_level_text }}",  "color": "{{ power_level_color }}"}

trigger:
  - platform: time_pattern
    minutes: "/1"

condition:
action:
  - choose:
    - alias: "Skipping"
      conditions:
      - condition: template
        value_template: >
          {{ (skip_if_zero_watts and (power_level == 0)) }}
      sequence:
        # If no power, skipping sending solar power data to Awtrix Light.
      - repeat:
          for_each: "{{ devices_topics }}"
          sequence:
            - service: mqtt.publish
              data:
                qos: 0
                retain: false
                topic: "{{ repeat.item }}"
                payload: '{}'
    - alias: "Not skipping"
      conditions:
      - condition: template
        value_template: >
          {{ not(skip_if_zero_watts and (power_level == 0)) }}
      sequence:
      - repeat:
          for_each: "{{ devices_topics }}"
          sequence:
            - service: mqtt.publish
              data:
                qos: 0
                retain: false
                topic: "{{ repeat.item }}"
                payload: >
                  {{ payload }}